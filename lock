                                                                                 getgenv().FalconWare= 
                                                                        {Global={Checks={Friend=false,Crew=false,Wall=  
                                                                    true},Resolver={Mode="Detection",DetectionValue=50},[         
                                                                "Memory Spoofer"]={Percentage=100},Debug=true},["Bullet Redirection"]={ 
                                                            Enabled=true,Prediction=0.1245,HitChance=100,Keybind={Bind=Enum.KeyCode.P,    
                                                          Mode="Toggle"},["Gun Settings"]={Enabled=true,["Distance Detections"]={Close=35,  
                                                        Mid=65,Far=math.huge},Pistols={FOV={Close=14,Mid=12,Far=7},Prediction={Close=0.1185,  
                                                      Mid=0.1165,Far=0.105},["Hit Chance"]={Close=100,Mid=100,Far=100}},Shotguns={FOV={Close=18 
                                                    ,Mid=14,Far=7},Prediction={Close=0.1225,Mid=0.12,Far=0.115},["Hit Chance"]={Close=100,Mid=100 
                                                  ,Far=100}},Automatics={FOV={Close=14,Mid=12,Far=7},Prediction={Close=0.13,Mid=0.1256,Far=0.12125} 
                                                  ,["Hit Chance"]={Close=25,Mid=50,Far=75}},Other={FOV={Close=14,Mid=12,Far=7},Prediction={Close=0.13 
                                                ,Mid=0.1256,Far=0.12125},["Hit Chance"]={Close=25,Mid=50,Far=75}}}},AimAssist={Enabled=true,Sensitivity 
                                                =2,Easing={Style=Enum.EasingStyle.Circular,Direction=Enum.EasingDirection.InOut},Ground={Part="Head",     
                                              Prediction=0.12,Smoothing=0.1145},Air={Part="Head",Prediction=0.14,Smoothing=0.12},Checks={                   
                                              Disable_On_ThirdPerson=true,Disable_On_Reload=true,Disable_When_Not_Holding_Gun=false},Keybind={Bind=Enum.    
                                            KeyCode.C,Mode="Toggle"},["Gun Settings"]={Enabled=false,["Distance Detections"]={Close=35,Mid=65,Far=math.huge}, 
                                            Pistols={Part={Close="Head",Mid="UpperTorso",Far="UpperTorso"},["Air Part"]={Close="Head",Mid="Head",Far="Head"},   
                                          Sensitivity={Close=2,Mid=2,Far=2},Smoothing={Close=0.073,Mid=0.0745,Far=0.074},["Air Smoothing"]={Close=0.078,Mid=0.077 
                                          ,Far=0.074},Prediction={Close=0.26,Mid=0.22,Far=0.2},["Air Prediction"]={Close=0.23,Mid=0.2,Far=0.19}},Shotguns={Part={   
                                          Close="Head",Mid="UpperTorso",Far="UpperTorso"},["Air Part"]={Close="Head",Mid="Head",Far="Head"},Sensitivity={Close=2,Mid= 
                                          2,Far=2},Smoothing={Close=0.073,Mid=0.0745,Far=0.074},["Air Smoothing"]={Close=0.078,Mid=0.077,Far=0.074},Prediction={Close 
                                        =0.26,Mid=0.22,Far=0.2},["Air Prediction"]={Close=0.23,Mid=0.2,Far=0.19}},Automatics={Part={Close="Head",Mid="UpperTorso",Far=  
                                        "UpperTorso"},["Air Part"]={Close="Head",Mid="Head",Far="Head"},      --[[==============================]]Sensitivity={Close=2,   
                                        Mid=2,Far=2},Smoothing={Close=0.073,Mid=0.0745,Far=0.074},[ --[[============================================]]"Air Smoothing"]={  
                                        Close=0.078,Mid=0.077,Far=0.074},Prediction={Close=0.26 --[[======================================================]],Mid=0.22,Far=  
                                      0.2},["Air Prediction"]={Close=0.23,Mid=0.2,Far=0.19} --[[==========================================================]]},Other={Part={   
                                      Close="Head",Mid="UpperTorso",Far="UpperTorso"},[   --[[==============================================================]]"Air Part"]={   
                                      Close="Head",Mid="Head",Far="Head"},Sensitivity={   --[[================================================================]]Close=2,Mid=2,  
                                      Far=2},Smoothing={Close=0.073,Mid=0.0745,Far=0.074} --[[==================================================================]],[            
                                      "Air Smoothing"]={Close=0.078,Mid=0.077,Far=0.074}, --[[==================================================================]]Prediction={      
                                    Close=0.26,Mid=0.22,Far=0.2},["Air Prediction"]={     --[[====================================================================]]Close=0.23,   
                    Mid=0.2,Far=0.19}}}},TriggerBot={Enabled=false,Prediction=0.124,Delay --[[====================================================================]]=0.001,Keybind= 
              {Bind=Enum.KeyCode.X,Mode="Hold"},["Gun Prediction Settings"]={Enabled=     --[[======================================================================]]false,[       
            "Distance Detections"]={Close=35,Mid=65,Far=math.huge},Pistols={Close=0.13,   --[[======================================================================]]Mid=0.1256,   
          Far=0.12125},Shotguns={Close=0.132,Mid=0.127,Far=0.124},Automatics={Close=0.132 --[[======================================================================]],Mid=0.1256,  
        Far=0.1254},Other={Close=0.132,Mid=0.1256,Far=0.1254}}},FOVs={Silent={FOVType=    --[[======================================================================]]"Circle",[    
        "Attach To Target"]={Enabled=false,Prediction=true},Visible=false,BoxWidth=55,    --[[======================================================================]]BoxHeight=85, 
      CircleRadius=100,Color=Color3.fromRGB(0,0,0),Filled=false,Transparency=0.5},[       --[[======================================================================]]"Trigger Bot" 
      ]={FOVType="Box",["Attach To Target"]={Enabled=true,Prediction=true},Visible=true,    --[[==================================================================]]BoxWidth=55,    
      BoxHeight=85,CircleRadius=300,Color=Color3.fromRGB(255,255,255),Filled=true,          --[[================================================================]]Transparency=0.5} 
    }};(function() local DetectedF;for _,v in ipairs(getgc()) do if ((typeof(v)=="function" --[[==============================================================]]) and islclosure( 
    v) and table.find(debug.getconstants(v),":: Adonis Anti Cheat::\n") and ( #debug.         --[[==========================================================]]getupvalues(v)>0))  
    then DetectedF=v;break;end end if  not DetectedF then return;end local DisconnectF=debug.   --[[====================================================]]getupvalue(DetectedF,7) 
    ;local KillF=debug.getupvalue(DetectedF,8);hookfunction(DisconnectF,function() end);          --[[==============================================]]hookfunction(KillF,       
    function() end);local OldDetectedF;OldDetectedF=hookfunction(DetectedF,function(action,info,      --[[====================================]]nocrash) if (action~="_")     
    then return coroutine.yield();end return OldDetectedF(action,info,nocrash);end);do local Players=game --[[========================]]:GetService("Players");local          
    LocalPlayer=Players.LocalPlayer;local BlockedMethods={"Kick","kick"};hookfunction(LocalPlayer.Kick,function() end);local __namecall;__namecall=hookmetamethod(game,     
  "__namecall",function(self,...) if ((self==LocalPlayer) and table.find(BlockedMethods,getnamecallmethod())) then return;end return __namecall(self,...);end);end end)() 
  ;local Configuration={Global={Checks={Friend=false,Crew=false,Wall=true},Resolver={Mode="Always",DetectionValue=50},["Memory Spoofer"]={Percentage=100}},[            
  "Bullet Redirection"]={Enabled=true,Prediction=0.12576575436542362,HitChance=100,Keybind={Bind=Enum.KeyCode.P,Mode="Hold"},["Gun Settings"]={Enabled=true,[             
  "Distance Detections"]={Close=35,Mid=65,Far=math.huge},Pistols={FOV={Close=15,Mid=13,Far=7},Prediction={Close=0.12,Mid=0.1185,Far=0.1085},["Hit Chance"]={Close=100,Mid 
  =100,Far=100}},Shotguns={FOV={Close=18,Mid=14,Far=7},Prediction={Close=0.1245,Mid=0.1225,Far=0.12},["Hit Chance"]={Close=100,Mid=100,Far=100}},Automatics={FOV={Close=  
  14,Mid=12,Far=7},Prediction={Close=0.13,Mid=0.1256,Far=0.12125},["Hit Chance"]={Close=25,Mid=50,Far=75}},Other={FOV={Close=14,Mid=12,Far=7},Prediction={Close=0.13,Mid= 
  0.1256,Far=0.12125},["Hit Chance"]={Close=25,Mid=50,Far=75}}}},AimAssist={Enabled=false,Sensitivity=2,Easing={Style=Enum.EasingStyle.Circular,Direction=Enum.           
  EasingDirection.InOut},Ground={Part="UpperTorso",Prediction=0.125,Smoothing=0.095},Air={Part="Head",Prediction=0.13,Smoothing=0.105},Checks={Disable_On_ThirdPerson=    
  true,Disable_On_Reload=true,Disable_When_Not_Holding_Gun=false},Keybind={Bind=Enum.KeyCode.C,Mode="Hold"},["Gun Settings"]={Enabled=false,["Distance Detections"]={     
  Close=35,Mid=65,Far=math.huge},Pistols={Part={Close="Head",Mid="UpperTorso",Far="UpperTorso"},["Air Part"]={Close="Head",Mid="Head",Far="Head"},Sensitivity={Close=2,   
  Mid=2,Far=2},Smoothing={Close=0.073,Mid=0.0745,Far=0.074},["Air Smoothing"]={Close=0.078,Mid=0.077,Far=0.074},Prediction={Close=0.26,Mid=0.22,Far=0.2},[                
  "Air Prediction"]={Close=0.23,Mid=0.2,Far=0.19}},Shotguns={Part={Close="Head",Mid="UpperTorso",Far="UpperTorso"},["Air Part"]={Close="Head",Mid="Head",Far="Head"},       
  Sensitivity={Close=2,Mid=2,Far=2},Smoothing={Close=0.073,Mid=0.0745,Far=0.074},["Air Smoothing"]={Close=0.078,Mid=0.077,Far=0.074},Prediction={Close=0.26,Mid=0.22,Far=   
  0.2},["Air Prediction"]={Close=0.23,Mid=0.2,Far=0.19}},Automatics={Part={Close="Head",Mid="UpperTorso",Far="UpperTorso"},["Air Part"]={Close="Head",Mid="Head",Far="Head" 
  },Sensitivity={Close=2,Mid=2,Far=2},Smoothing={Close=0.073,Mid=0.0745,Far=0.074},["Air Smoothing"]={Close=0.078,Mid=0.077,Far=0.074},Prediction={Close=0.26,Mid=0.22,Far= 
  0.2},["Air Prediction"]={Close=0.23,Mid=0.2,Far=0.19}},Other={Part={Close="Head",Mid="UpperTorso",Far="UpperTorso"},["Air Part"]={Close="Head",Mid="Head",Far="Head"},    
  Sensitivity={Close=2,Mid=2,Far=2},Smoothing={Close=0.073,Mid=0.0745,Far=0.074},["Air Smoothing"]={Close=0.078,Mid=0.077,Far=0.074},Prediction={Close=0.26,Mid=0.22,Far=   
  0.2},["Air Prediction"]={Close=0.23,Mid=0.2,Far=0.19}}}},FOVs={Silent={FOVType="Circle",["Attach To Target"]={Enabled=false,Prediction=false},Visible=false,BoxWidth=55,  
  BoxHeight=85,CircleRadius=110,Color=Color3.fromRGB(255,255,255),Filled=true,Transparency=0.5},["Trigger Bot"]={FOVType="Box",["Attach To Target"]={Enabled=true,          
  Prediction=true},Visible=true,BoxWidth=55,BoxHeight=85,CircleRadius=300,Color=Color3.fromRGB(255,255,255),Filled=true,Transparency=0.5}},TriggerBot={Enabled=true,        
  Prediction=0.124,Delay=0.001,Keybind={Bind=Enum.KeyCode.X,Mode="Hold"},["Gun Prediction Settings"]={Enabled=false,["Distance Detections"]={Close=35,Mid=65,Far=math.huge} 
  ,Pistols={Close=0.13,Mid=0.1256,Far=0.12125},Shotguns={Close=0.132,Mid=0.127,Far=0.124},Automatics={Close=0.132,Mid=0.1256,Far=0.1254},Other={Close=0.132,Mid=0.1256,Far= 
  0.1254}}}};local function CombineTables(Base,ToAdd) Base=Base or {} ;ToAdd=ToAdd or {} ;for i,v in pairs(ToAdd) do local BaseValue=Base[i] or false ;if ((typeof(v)==     
  "table") and (typeof(BaseValue)=="table")) then CombineTables(BaseValue,v);continue;end Base[i]=v;end return Base;end Configuration=CombineTables(Configuration,getgenv() 
  .FalconWare);getgenv().FalconWare=Configuration;local Players=game:GetService("Players");local ReplicatedStorage=game:GetService("ReplicatedStorage");local RunService= 
  game:GetService("RunService");local TweenService=game:GetService("TweenService");local UserInputService=game:GetService("UserInputService");local Workspace=game:       
  GetService("Workspace");local CoreGui=game:GetService("CoreGui");local Stats=game:GetService("Stats");local VirtualInputManager=game:GetService("VirtualInputManager"); 
    local HttpService=game:GetService("HttpService");local LogService=game:GetService("LogService");if  not LPH_OBFUSCATED then function LPH_JIT_MAX(...) return ...;end  
    end local KeybindHandler;do local Binds={};local Module={TestMode=false};do Module.Get=function(Id) if  not Id then return Binds;end local FoundI= -1;for i,Bind in   
    ipairs(Binds) do if (Bind.Id==Id) then FoundI=i;break;end end if (FoundI== -1) then return false;end return Binds[FoundI],FoundI;end;local ValidInputItems={"KeyCode" 
    ,"UserInputType"};Module.CreateBind=function(Data) local Keybind=((typeof(Data.Keybind)=="function") and Data.Keybind()) or Data.Keybind ;assert((typeof(Keybind)==   
      "EnumItem") and table.find(ValidInputItems,tostring(Keybind.EnumType)) ,"Invalid keybind");local Id=HttpService:GenerateGUID();table.insert(Binds,{Id=Id,Keybind= 
      Data.Keybind,Callback=Data.Callback or function(State,Bind) end ,ProcessedCheck=Data.ProcessedCheck or false ,Hold=Data.Hold or false ,State=Data.State or false  
      });return Id;end;Module.Update=function(Id,Property,NewValue) local Bind=Module.Get(Id);if  not Bind then return false;end Bind[Property]=NewValue;return true;   
        end;Module.UpdateKeybind=function(Id,NewKeybind) return Module.Update(Id,"Keybind",NewKeybind);end;Module.UpdateCallback=function(Id,NewCallback) return Module 
        .Update(Id,"Callback",NewCallback);end;Module.RemoveBind=function(Id) local _,FoundI=Module.Get(Id);if  not FoundI then return false;end table.remove(Binds,    
        FoundI);return true;end;Module.CreateConnection=function() Module.InputBeganConnection=UserInputService.InputBegan:Connect(function(Input,gameProcessedEvent)   
          for _,Bind in ipairs(Binds) do local Keybind=Bind.Keybind;Keybind=((typeof(Keybind)=="function") and Keybind()) or Keybind ;local Property=tostring(Keybind 
            .EnumType);if ((Input[Property]~=Keybind) or (Bind.ProcessedCheck and gameProcessedEvent)) then continue;end if Bind.Hold then Bind.State=true;else Bind. 
              State= not Bind.State;end Bind.Callback(Bind.State,Bind);end end);Module.InputEndedConnection=UserInputService.InputEnded:Connect(function(Input,       
                gameProcessedEvent) for _,Bind in ipairs(Binds) do if  not Bind.Hold then continue;end local Keybind=Bind.Keybind;Keybind=((typeof(Keybind)==         
                  "function") and Keybind()) or Keybind ;local Property=tostring(Keybind.EnumType);if ((Input[Property]~=Keybind) or (Bind.ProcessedCheck and       
                      gameProcessedEvent)) then continue;end Bind.State=false;Bind.Callback(Bind.State,Bind);end end);end;Module.Destroy=function(KeepConnection)   
                                  if  not KeepConnection then if Module.InputBeganConnection then Module.InputBeganConnection:Disconnect();Module.                  
                                      InputBeganConnection=nil;end if Module.InputEndedConnection then Module.InputEndedConnection:Disconnect();Module.             
                                      InputEndedConnection=nil;end end Binds={};end;end Module.             CreateConnection();if Module.TestMode then Module.      
                                      CreateBind({Keybind=Enum.KeyCode.X,ProcessedCheck=true,               Callback=function(State,Bind) print(Bind.Keybind.Name 
                                         .. " was pressed with state "   .. tostring(State) );end})         ;Module.CreateBind({Keybind=Enum.UserInputType.       
                                      MouseButton2,ProcessedCheck=true,Callback=function(State,Bind         ) print(Bind.Keybind.Name   ..                        
                                      " was pressed with state "   .. tostring(State) );end});                Module.CreateBind({Keybind=Enum.UserInputType.      
                                      MouseButton2,ProcessedCheck=true,Callback=function(State,Bind           ) local Action=(State and "pressed") or "released"  
                                      ;print(Bind.Keybind.Name   .. " was "   .. Action );end,Hold=           true});end KeybindHandler=Module;end local        
                                        PlaceId=game.PlaceId;local DaHoodId={2788229376,7213786345,           16033173781};local HoodModdedId={5602055394,      
                                        7951883376};local HoodCustomId={9825515356};local Weapons={             Pistols={},Shotguns={},Automatics={},Other={}}; 
                                        if table.find(DaHoodId,PlaceId) then Weapons={Pistols={                 "[Revolver]","[Glock]","[Silencer]"},Shotguns 
                                        ={"[Shotgun]","[Double-Barrel SG]","[TacticalShotgun]"},                Automatics={"[SMG]","[P90]","[LMG]","[AR]",   
                                        "[SilencerAR]","[AK47]","[DrumGun]"},Other={"[Rifle]"}};                  elseif table.find(HoodCustomId,PlaceId)   
                                        then Weapons={Pistols={"[Revolver]","[Glock]",                            "[Silencer]"},Shotguns={"[Shotgun]",      
                                          "[DoubleBarrel]","[TacticalShotgun]"},Automatics={                        "[SMG]"},Other={}};elseif table.find( 
                                          HoodModdedId,PlaceId) then Weapons={Pistols={                               "[Sniper]","[Glock]","[R8]",    
                                            "[Revolver]","[Deagle]"},Shotguns={                                         "[TacticalShotgun]",      
                                            "[Shotgun]","[Double Barrel SG]"},Automatics={                                    "[AA12]",   
                                              "[AK-47]","[Akimbo SMG]","[AR]","[Famas]",    
                                                "[Golden AK-47]","[HMinigun]","[LMG]",    
                                                    "[LMinigun]","[P90]","[Tec-9]",     
                                                          "[UMP]","[Vector]",     


"[DrumGun]","[SCAR-H]","[Silencer]","[SilencerAR]","[SMG]"},Other={"AUG","[RPG]","[Grenade Launcher]","[Railgun]","[Flamethrower]","[FlareGun]","[Ray Gun]","[Homing Launcher ]","[PlasmaRifle]"}};else return;end local function GetUpdatedMouseArg() local MousePos;for i,v in ipairs(game:GetDescendants()) do if (v:IsA("LocalScript") or v:IsA("ModuleScript")) then local bytecode=getscriptbytecode(v);bytecode=tostring(bytecode);for l in bytecode:gmatch("%w+") do if (l:match("UpdateMousePosI") and (l~="UpdateMousePositionI")) then MousePos=l;end end end end return MousePos;end local function GetUpdateMouseArg() local Resolve={[2788229376]=GetUpdatedMouseArg(),[16033173781]=GetUpdatedMouseArg(),[7213786345]=GetUpdatedMouseArg(),[5602055394]="MousePos",[7951883376]="MousePos",[9825515356]="GetMousePos"};return Resolve[PlaceId] or "UpdateMousePosI" ;end local function GetMainEvent() if (table.find({5602055394,7951883376},PlaceId)) then return ReplicatedStorage:FindFirstChild("Bullets");end return ReplicatedStorage:FindFirstChild("MainEvent");end local R15_LIMBS={"Head","UpperTorso","LowerTorso","LeftLowerLeg","LeftUpperLeg","RightLowerLeg","RightUpperLeg","LeftHand","LeftLowerArm","LeftUpperArm","RightHand","RightLowerArm","RightUpperArm"};local LocalPlayer=Players.LocalPlayer;local Mouse=LocalPlayer:GetMouse();local CurrentGun;local Target;local Hit;local CamlockTarget;local UpdateMouseArg=GetUpdateMouseArg();local MainEvent=GetMainEvent();local OurDataFolder=LocalPlayer:WaitForChild("DataFolder",1/0 );local TriggerPart=Instance.new("Part");TriggerPart.Name=tostring(math.random(1000000,999999999));TriggerPart.Size=Vector3.new(1.7,6,1.7);TriggerPart.Parent=Workspace;TriggerPart.Anchored=true;TriggerPart.CanCollide=false;TriggerPart.Transparency=(Configuration['Global']['Debug'] and 0.5) or 1 ;local SilentFOV;local TriggerBotFOV;local AimAssistFOV;local function CreateFOV() local SilentCustomisation=Configuration['FOVs']['Silent'];local IsSquare=SilentCustomisation.FOVType=="Box" ;SilentFOV=Drawing.new((IsSquare and "Square") or "Circle" );SilentFOV.Visible=Configuration['FOVs']['Silent'].Visible;SilentFOV.Transparency=SilentCustomisation.Transparency;SilentFOV.Color=SilentCustomisation.Color;SilentFOV.Thickness=0.1;SilentFOV.Filled=SilentCustomisation.Filled;if IsSquare then SilentFOV.Size=Vector2.new(SilentCustomisation.BoxWidth,SilentCustomisation.BoxHeight);else SilentFOV.Radius=SilentCustomisation.CircleRadius;SilentFOV.NumSides=100/3 ;end return SilentFOV;end CreateFOV();local function UpdateFOV() local SilentCustomisation=Configuration['FOVs']['Silent'];SilentFOV.Visible=SilentCustomisation.Visible;if  not SilentCustomisation["Attach To Target"].Enabled then SilentFOV.Position=UserInputService:GetMouseLocation();return;end if  not Target then SilentFOV.Visible=false;return;end local CurrentCamera=Workspace.CurrentCamera;local TargetPart=Target.Character:FindFirstChild("UpperTorso");if  not TargetPart then return;end local TargetPosition=Target.Character.UpperTorso.Position;local TargetScreenPosition,_=CurrentCamera:WorldToViewportPoint(TargetPosition);local TargetScreenPosition2=Vector2.new(TargetScreenPosition.X,TargetScreenPosition.Y);if SilentCustomisation["Attach To Target"].Enabled then local SilentAimConfiguration=Configuration["Bullet Redirection"];local Velocity=(IsAntiAim and GetNewVelocity(TargetPart)) or TargetPart.Velocity ;if (SilentAimConfiguration.Prediction~=nil) then Velocity=Velocity * SilentAimConfiguration.Prediction ;end if (SilentCustomisation.FOVType=="Box") then local ScaleFactor=(1/(TargetScreenPosition.Z * math.tan(math.rad(CurrentCamera.FieldOfView/2 )) * 2)) * 100 ;if SilentCustomisation["Attach To Target"].Prediction then SilentFOV.Size=Vector2.new(math.floor(SilentCustomisation.BoxWidth * ScaleFactor ),math.floor(SilentCustomisation.BoxHeight * ScaleFactor ));else SilentFOV.Size=Vector2.new(math.floor(SilentCustomisation.BoxWidth * ScaleFactor ),math.floor(SilentCustomisation.BoxHeight * ScaleFactor ));end SilentFOV.Position=(SilentCustomisation["Attach To Target"].Prediction and ((TargetScreenPosition2 + Vector2.new(Velocity.X,0)) -(SilentFOV.Size/2))) or (TargetScreenPosition2-(SilentFOV.Size/2)) ;else local Distance=(CurrentCamera.CFrame.Position-TargetPosition).Magnitude;SilentFOV.Radius=(100 * SilentCustomisation.CircleRadius)/Distance ;SilentFOV.Position=(SilentCustomisation["Attach To Target"].Prediction and (TargetScreenPosition2 + Vector2.new(Velocity.X,0))) or TargetScreenPosition2 ;end end end local function UpdateGunSpecific() if  not (Target and CurrentGun) then return;end local SilentAimConfiguration=Configuration["Bullet Redirection"];local SilentCustomisation=Configuration['FOVs']['Silent'];local SilentGunSpecific=SilentAimConfiguration["Gun Settings"];local TriggerBotConfiguration=Configuration.TriggerBot;local TriggerBotGunSpecific=TriggerBotConfiguration["Gun Prediction Settings"];local CamlockConfiguration=Configuration.AimAssist;local CamlockGunSpecific=CamlockConfiguration["Gun Settings"];if  not (SilentGunSpecific.Enabled or TriggerBotGunSpecific.Enabled or CamlockGunSpecific.Enabled) then return;end local CurrentCamera=Workspace.CurrentCamera;local Distance=(CurrentCamera.CFrame.Position-Target.Character.UpperTorso.Position).Magnitude;local function SetMatchedData(DetectionType) if SilentGunSpecific.Enabled then local GunSpecificData=SilentGunSpecific[CurrentGun];SilentAimConfiguration.Prediction=GunSpecificData.Prediction[DetectionType];SilentAimConfiguration.HitChance=GunSpecificData["Hit Chance"][DetectionType];if  not SilentCustomisation["Attach To Target"].Enabled then SilentFOV.Radius=GunSpecificData.FOV[DetectionType] * 3 ;end end if TriggerBotGunSpecific.Enabled then TriggerBotConfiguration.Prediction=TriggerBotGunSpecific[CurrentGun][DetectionType];end if CamlockGunSpecific.Enabled then for _,Type in ipairs({"Prediction","Air Prediction","Smoothing","Air Smoothing","Sensitivity","Air Part","Part"}) do CamlockConfiguration[Type]=CamlockGunSpecific[CurrentGun][Type][DetectionType];end end end local GunSpecificDetection=SilentGunSpecific["Distance Detections"];if (Distance<=GunSpecificDetection.Close) then SetMatchedData("Close");elseif (Distance<=GunSpecificDetection.Mid) then SetMatchedData("Mid");else SetMatchedData("Far");end end local function IsVectorInVector(A,B,Size) return (A.X>=B.X) and (A.Y>=B.Y) and (A.X<=(B.X + Size.X)) and (A.Y<=(B.Y + Size.Y)) ;end local function InFOV(Character) local MousePosition=UserInputService:GetMouseLocation();local SilentCustomisation=Configuration['FOVs']['Silent'];if SilentCustomisation["Attach To Target"].Enabled then if (SilentCustomisation.FOVType=="Box") then return IsVectorInVector(MousePosition,SilentFOV.Position,SilentFOV.Size);else local Distance=(MousePosition-SilentFOV.Position).Magnitude;return Distance<=SilentFOV.Radius ;end end local SilentRadius=SilentFOV.Radius;local CurrentCamera=Workspace.CurrentCamera;for _,LimbName in ipairs(R15_LIMBS) do local Limb=Character:FindFirstChild(LimbName);if  not Limb then return;end local Position=CurrentCamera:WorldToViewportPoint(Limb.Position);local Distance=(Vector2.new(Position.X,Position.Y) -MousePosition).Magnitude;if (Distance<SilentRadius) then return true;end end return false;end local function AntiAiming(Player) return Player.Character.HumanoidRootPart.Velocity.Magnitude>Configuration['Global']['Resolver'].DetectionValue ;end local function SilentHitChance() return math.random(0,100)<=Configuration["Bullet Redirection"].HitChance ;end local function CheckHoldingGun() if Configuration['AimAssist']['Checks'].Disable_When_Not_Holding_Gun then return CurrentGun~=nil ;end return true;end local function CrewCheck(Player) if  not Configuration.Global.Crew_Check then return false;end if (table.find({5602055394,7951883376},PlaceId)) then local OurInformation=LocalPlayer:FindFirstChild("Information");local TheirInformation=Player:FindFirstChild("Information");if  not (OurInformation and TheirInformation) then return false;end return OurInformation.Crew.Value~=TheirInformation.Crew.Value ;end local TheirDataFolder=Player:FindFirstChild("DataFolder");if  not TheirDataFolder then return false;end local TheirInformation=TheirDataFolder:FindFirstChild("Information");if  not TheirInformation then return false;end local OurCrew=OurDataFolder.Information:FindFirstChild("Crew");local TheirCrew=TheirInformation:FindFirstChild("Crew");if  not (OurCrew and TheirCrew) then return false;end OurCrew=OurCrew.Value;TheirCrew=TheirCrew.Value;if ( not OurCrew or (OurCrew=="") or  not TheirCrew or (TheirCrew=="")) then return false;end return OurCrew~=TheirCrew ;end local function FriendCheck(PlayerId) if  not Configuration.Global.Friend_Check then return false;end return LocalPlayer:IsFriendsWith(PlayerId);end local function DisableOnThirdPerson() if  not Configuration['AimAssist']['Checks'].Disable_On_ThirdPerson then return true;end local CurrentCamera=Workspace.CurrentCamera;return ((CurrentCamera.CFrame.Position-CurrentCamera.Focus.Position).Magnitude<0.7) and (UserInputService.MouseBehavior==Enum.MouseBehavior.LockCenter) ;end local function GetClosestPartToCursor(Character) local CurrentCamera=Workspace.CurrentCamera;local Closest;local Distance=1/0 ;for _,Part in ipairs(Character:GetChildren()) do if  not Part:IsA("BasePart") then continue;end local Position=CurrentCamera:WorldToViewportPoint(Part.Position);Position=Vector2.new(Position.X,Position.Y);local Magnitude=(UserInputService:GetMouseLocation() -Position).Magnitude;if (Magnitude<Distance) then Closest=Part;Distance=Magnitude;end end return Closest;end local function IsReloading() if  not Configuration['AimAssist']['Checks'].Disable_On_Reload then return true;end if (PlaceId==9825515356) then return  not LocalPlayer.Character.BodyEffects.Reloading.Value;end if (table.find({5602055394,7951883376},PlaceId)) then return  not LocalPlayer.Character.I_LOADED_I.Reload.Value;end return  not LocalPlayer.Character.BodyEffects.Reload.Value;end local function GetClosestPointOnPart(Part) local PartCFrame=Part.CFrame;local PartSize=Part.Size;local PartSizeTransformed=PartSize * (0.93/2) ;local MousePosition=UserInputService:GetMouseLocation();local CurrentCamera=Workspace.CurrentCamera;local MouseRay=CurrentCamera:ViewportPointToRay(MousePosition.X,MousePosition.Y);local Transformed=PartCFrame:PointToObjectSpace(MouseRay.Origin + (MouseRay.Direction * MouseRay.Direction:Dot(PartCFrame.Position-MouseRay.Origin )) );if (Mouse.Target==Part) then return Mouse.Hit;end return PartCFrame * Vector3.new(math.clamp(Transformed.X, -PartSizeTransformed.X,PartSizeTransformed.X),math.clamp(Transformed.Y, -PartSizeTransformed.Y,PartSizeTransformed.Y),math.clamp(Transformed.Z, -PartSizeTransformed.Z,PartSizeTransformed.Z)) ;end local function GetNewVelocity(Part) local LastPosition=Part.Position;task.wait(0.085);local CurrentPosition=Part.Position;local Velocity=(CurrentPosition-LastPosition)/0.085 ;return Velocity * Vector3.new(1,0,1) ;end local function CustomCheck(Player) local CurrentCameraPosition=Workspace.CurrentCamera.CFrame.Position;local PlayerCharacter=Player.Character;local PlayerHRP=PlayerCharacter.HumanoidRootPart;local Grabbed=PlayerCharacter:FindFirstChild("GRABBING_CONSTRAINT")~=nil ;local raycastParms=RaycastParams.new();raycastParms.FilterDescendantsInstances={LocalPlayer.Character,PlayerCharacter.Parent,TriggerPart};local RaycastResult=Workspace:Raycast(CurrentCameraPosition,PlayerHRP.Position-CurrentCameraPosition );local KOd=false;if (table.find({5602055394,7951883376},PlaceId) and Player:FindFirstChild("Information") and Player.Information:FindFirstChild("KO")) then KOd=Player.Information.KO.Value;elseif (PlayerCharacter:FindFirstChild("BodyEffects") and PlayerCharacter.BodyEffects:FindFirstChild("K.O")) then KOd=PlayerCharacter.BodyEffects["K.O"].Value;end return  not (KOd or Grabbed);end local function ApplyNormalPredictionFormula(Part) local Character=Part.Parent;local Humanoid=Character:FindFirstChild("Humanoid");if  not Humanoid then return;end local IsInAir=(Humanoid:GetState()==Enum.HumanoidStateType.Freefall) or (Humanoid:GetState()==Enum.HumanoidStateType.Jumping) ;local TargetPart=Part;local TargetVelocity=TargetPart.Velocity;local PredictionVelocity=Vector3.new(TargetVelocity.X,0,TargetVelocity.Z) * Configuration["Bullet Redirection"].Prediction ;local Gravity=Workspace.Gravity;if IsInAir then local TimeToHit=(2 * PredictionVelocity.Y)/Gravity ;local GravityAdjustment=Vector3.new(0, -0.5 * Gravity * TimeToHit * TimeToHit ,0);PredictionVelocity=PredictionVelocity + GravityAdjustment ;local YOffset=Vector3.new(0,0.85,0);PredictionVelocity=PredictionVelocity + YOffset ;end local ClosestPoint=GetClosestPointOnPart(Part);local PredictedCFrame=ClosestPoint + PredictionVelocity ;return PredictedCFrame;end local function ApplyRecalculatedPredictionFormula(Part) local ClosestPoint=GetClosestPointOnPart(Part);local PredictionVelocity=GetNewVelocity(Part) * Configuration["Bullet Redirection"].Prediction ;local PredictedCFrame=ClosestPoint + PredictionVelocity ;return PredictedCFrame;end local function GetClosestPlayerToCursor() local CurrentCamera=Workspace.CurrentCamera;local MousePosition=UserInputService:GetMouseLocation();local Closest;local Distance=1/0 ;for _,Player in ipairs(Players:GetPlayers()) do if (Player==LocalPlayer) then continue;end local Character=Player.Character;if  not Character then continue;end local HumanoidRootPart=Character:FindFirstChild("HumanoidRootPart");if  not HumanoidRootPart then continue;end if (FriendCheck(Player.UserId) or CrewCheck(Player)) then continue;end local Position,OnScreen=CurrentCamera:WorldToViewportPoint(HumanoidRootPart.Position);if  not OnScreen then continue;end if  not CustomCheck(Player) then continue;end local Magnitude=(Vector2.new(Position.X,Position.Y) -MousePosition).Magnitude;if (Magnitude<Distance) then Closest=Player;Distance=Magnitude;end end return Closest;end local function GetToolType(ToolName) for Type,Guns in pairs(Weapons) do if (table.find(Guns,ToolName)) then return Type;end end end local Activated;local function OnLocalCharacterAdded(Character) if  not Character then return;end CurrentGun=nil;Character.ChildAdded:Connect(function(Tool) if  not Tool:IsA("Tool") then return;end CurrentGun=GetToolType(Tool.Name);Activated=Tool.Activated:Connect(function() if  not Configuration["Bullet Redirection"].Enabled then return;end if  not (Target and InFOV(Target.Character) and SilentHitChance()) then return;end if (table.find({5602055394,7951883376},PlaceId)) then MainEvent:FireServer(UpdateMouseArg,Hit,"P");else MainEvent:FireServer(UpdateMouseArg,Hit);end end);end);Character.ChildRemoved:Connect(function(Tool) if  not Tool:IsA("Tool") then return;end CurrentGun=nil;Activated:Disconnect();end);end OnLocalCharacterAdded(LocalPlayer.Character);LocalPlayer.CharacterAdded:Connect(OnLocalCharacterAdded);KeybindHandler.CreateBind({Keybind=function() return Configuration['AimAssist'].Keybind.Bind;end,ProcessedCheck=true,Hold=Configuration['AimAssist'].Keybind.Mode=="Hold" ,Callback=function(Value) if Value then CamlockTarget=GetClosestPlayerToCursor();return;end CamlockTarget=nil;end});KeybindHandler.CreateBind({Keybind=function() return Configuration["Bullet Redirection"].Keybind.Bind;end,ProcessedCheck=true,Hold=Configuration["Bullet Redirection"].Keybind.Mode=="Hold" ,Callback=function(Value) if (Configuration["Bullet Redirection"].Keybind.Mode=="Hold") then Configuration["Bullet Redirection"].Enabled=Value;return;end Configuration["Bullet Redirection"].Enabled= not Configuration["Bullet Redirection"].Enabled;end});if Configuration['TriggerBot'].Enabled then Configuration['TriggerBot'].Enabled=false;end KeybindHandler.CreateBind({Keybind=function() return Configuration['TriggerBot'].Keybind.Bind;end,ProcessedCheck=true,Hold=Configuration['TriggerBot'].Keybind.Mode=="Hold" ,Callback=function(Value) if (Configuration['TriggerBot'].Keybind.Mode=="Hold") then Configuration['TriggerBot'].Enabled=Value;return;end Configuration['TriggerBot'].Enabled= not Configuration['TriggerBot'].Enabled;end});do local SelectedConfiguration=Configuration['Global']["Memory Spoofer"].Percentage/100 ;local RobloxGui=CoreGui:WaitForChild("RobloxGui",8999999488);local Debug=false;local function DebugPrint(...) if Debug then print(...);end end local function math_round(n,scale) return ("%."   .. (scale or 0)   .. "f"):format(n);end local function GetUntrackedMemory() local TotalMemory=Stats:GetTotalMemoryUsageMb();for i=0,24 do pcall(function() TotalMemory=TotalMemory-Stats:GetMemoryUsageMbForTag(i) ;end);end return TotalMemory;end local function CalculateFakeMemoryTotal(Rounding,Remove) Remove=Remove or 0 ;local UntrackedMemory=math.clamp(GetUntrackedMemory() * SelectedConfiguration ,0,1/0 );local Removed=UntrackedMemory + Remove ;local Value=(10000 -Stats:GetTotalMemoryUsageMb()) -Removed ;Value=math_round(Value,Rounding);return Value,math_round(UntrackedMemory,Rounding),math_round(Removed,Rounding);end local function OnPSViewerChild(Frame) if ( not Frame or (Frame.Name~="Frame")) then return;end DebugPrint("OnPSViewerChild called");local Type=Frame:WaitForChild("TextLabel",8999999488);DebugPrint("OnPSViewerChild got vars");if  not (Type.Text=="Memory") then return;end local PSLabels={};for _,v in ipairs(Frame:GetChildren()) do if (v.Name~="PS_DecoratedValueLabel") then continue;end local Label=v:WaitForChild("Label",8999999488);repeat task.wait();until Label.Text~="Label"  local Name=Label.Text:match("(%a+):");PSLabels[Name]=Label;end DebugPrint("Initialised PS_Viewer children");local CurrentLabel=PSLabels.Current;CurrentLabel.Text="Current: "   .. CalculateFakeMemoryTotal(2)   .. " MB" ;CurrentLabel:GetPropertyChangedSignal("Text"):Connect(function() CurrentLabel.Text="Current: "   .. CalculateFakeMemoryTotal(2)   .. " MB" ;DebugPrint("Set Memory Current (PerformanceStats 2)");end);local AverageLabel=PSLabels.Average;AverageLabel.Text="Average: "   .. CalculateFakeMemoryTotal(2,math.random(10,100)/100 )   .. " MB" ;AverageLabel:GetPropertyChangedSignal("Text"):Connect(function() AverageLabel.Text="Average: "   .. CalculateFakeMemoryTotal(2,math.random(10,100)/100 )   .. " MB" ;DebugPrint("Set Memory Average (PerformanceStats 2)");end);end local function OnPerformanceStats(PerformanceStats) if  not PerformanceStats then return;end local PSViewer=PerformanceStats:WaitForChild("PS_Viewer",8999999488);local PSButtons={};for _,v in ipairs(PerformanceStats:GetChildren()) do if (v.Name~="PS_Button") then continue;end PSButtons[v.StatsMiniTextPanelClass.TitleLabel.Text]=v;end DebugPrint("Initialised PS_Button children");local PSButtonsMem=PSButtons.Mem.StatsMiniTextPanelClass.ValueLabel;PSButtonsMem.Text=CalculateFakeMemoryTotal(2)   .. " MB" ;PSButtonsMem:GetPropertyChangedSignal("Text"):Connect(function() PSButtonsMem.Text=CalculateFakeMemoryTotal(2)   .. " MB" ;DebugPrint("Set Memory (PerformanceStats)");end);OnPSViewerChild(PSViewer:FindFirstChild("Frame"));PSViewer.ChildAdded:Connect(OnPSViewerChild);end OnPerformanceStats(RobloxGui:FindFirstChild("PerformanceStats"));RobloxGui.ChildAdded:Connect(function(child) if (child.Name=="PerformanceStats") then OnPerformanceStats(child);end end);local function OnLatestEntryText(LatestEntryText) if  not LatestEntryText then DebugPrint("Fake LatestEntryText");return;end local function Set() LatestEntryText.Text=CalculateFakeMemoryTotal(3);DebugPrint("Set Memory (LatestEntryText)");end Set();LatestEntryText:GetPropertyChangedSignal("Text"):Connect(Set);end local function OnHoverTextY(HoverTextY) if  not HoverTextY then return;end local debounce=false;local function Set() if debounce then debounce=false;return;end debounce=true;local _,_,Removed=CalculateFakeMemoryTotal(3);local FakeValue=tonumber(HoverTextY.Text) -tonumber(Removed) ;HoverTextY.Text=math_round(FakeValue,3);DebugPrint("Set Memory (HoverTextY)");end Set();HoverTextY:GetPropertyChangedSignal("Text"):Connect(Set);end local function OnAxisTextY0(AxisTextY0) if  not AxisTextY0 then DebugPrint("Fake AxisTextY0");return;end local debounce=false;local function Set() if debounce then debounce=false;DebugPrint("AxisTextY0 debounce");return;end debounce=true;local _,_,Removed=CalculateFakeMemoryTotal(3);local FakeValue=tonumber(AxisTextY0.Text) -tonumber(Removed) ;AxisTextY0.Text=math_round(FakeValue,3);DebugPrint("Set Memory (AxisTextY0)");end Set();AxisTextY0:GetPropertyChangedSignal("Text"):Connect(Set);end local function OnMemoryGraph(Graph) if  not Graph then return;end DebugPrint("Graph Added");local graph=Graph:WaitForChild("graph",8999999488);local AxisTextY0=graph:WaitForChild("AxisTextY0",8999999488);local LatestEntryText=graph:FindFirstChild("LatestEntryText");local HoverTextY=graph:FindFirstChild("HoverTextY",true);graph.DescendantAdded:Connect(function(child) if (child.Name=="LatestEntryText") then OnLatestEntryText(child);end if (child.Name=="HoverTextY") then OnHoverTextY(child);end if (child.Name=="AxisTextY0") then OnAxisTextY0(child);end end);OnAxisTextY0(AxisTextY0);OnLatestEntryText(LatestEntryText);OnHoverTextY(HoverTextY);end local function GetErrorCount() local Count=0;for _,Log in ipairs(LogService:GetLogHistory()) do if ( not Log.message:find("depth exceeded for Instance.TextChanged") and (Log.messageType==Enum.MessageType.MessageError)) then Count+=1 end end return Count;end local function OnClientLog(ClientLog) if  not ClientLog then return;end DebugPrint("ClientLog added");ClientLog.ChildAdded:Connect(function(child) if (tonumber(child.Name)==nil) then return;end local Message=child:WaitForChild("msg",8999999488);if (Message.Text:find("depth exceeded for Instance.TextChanged")) then child.Visible=false;DebugPrint("Attempt to destroy error");end end);end local function OnDevConsoleMaster() if  not CoreGui:FindFirstChild("DevConsoleMaster") then return;end DebugPrint("DevConsoleMaster added");local DevConsoleUI=CoreGui.DevConsoleMaster.DevConsoleWindow.DevConsoleUI;local LiveStatsModule=DevConsoleUI.TopBar.LiveStatsModule;local MemoryUsageDevConsole=LiveStatsModule['MemoryUsage_MB'];MemoryUsageDevConsole.Text=CalculateFakeMemoryTotal(0)   .. " MB" ;MemoryUsageDevConsole:GetPropertyChangedSignal("Text"):Connect(function() MemoryUsageDevConsole.Text=CalculateFakeMemoryTotal(0)   .. " MB" ;DebugPrint("Set Memory (DevConsole Top)");end);DebugPrint("Set MemoryUsageDevConsole");local LogErrorCount=LiveStatsModule.LogErrorCount;local Connection;Connection=RunService.RenderStepped:Connect(function() if  not LogErrorCount.Parent then return Connection:Disconnect();end LogErrorCount.Text=tostring(GetErrorCount());end);local function OnMainView(DevConsoleEntries) local MainView=DevConsoleUI:FindFirstChild("MainView");if  not MainView then return;end DebugPrint("MainView added");MainView.ChildAdded:Connect(function(child) DebugPrint("MainView:",child);if (child.Name=="ClientLog") then OnClientLog(child);end end);OnClientLog(MainView:FindFirstChild("ClientLog"));DevConsoleEntries=DevConsoleEntries or MainView:WaitForChild("ClientMemory",8999999488):WaitForChild("Entries",8999999488) ;local function SetGraph(Memory) Memory.ChildAdded:Connect(function(child) if (child.Name=="Graph") then OnMemoryGraph(child);end end);OnMemoryGraph(Memory:FindFirstChild("Graph"));end local function SetMemoryUsageDevConsole2() local MemoryUsageDevConsole2=DevConsoleEntries:FindFirstChild("Memory");if  not MemoryUsageDevConsole2 then return;end SetGraph(MemoryUsageDevConsole2);MemoryUsageDevConsole2=MemoryUsageDevConsole2.value;MemoryUsageDevConsole2.Text=CalculateFakeMemoryTotal(3);MemoryUsageDevConsole2:GetPropertyChangedSignal("Text"):Connect(function() MemoryUsageDevConsole2.Text=CalculateFakeMemoryTotal(3);DebugPrint("Set Memory (DevConsole Details)");end);DebugPrint("Set MemoryUsageDevConsole2");end SetMemoryUsageDevConsole2();local function SetUntrackedMemoryDevConsole() local UntrackedMemoryDevConsole=DevConsoleEntries:FindFirstChild("UntrackedMemory");if  not UntrackedMemoryDevConsole then return;end DebugPrint("UntrackedMemory added");UntrackedMemoryDevConsole=UntrackedMemoryDevConsole.value;UntrackedMemoryDevConsole.Text=select(2,CalculateFakeMemoryTotal(3));UntrackedMemoryDevConsole:GetPropertyChangedSignal("Text"):Connect(function() UntrackedMemoryDevConsole.Text=select(2,CalculateFakeMemoryTotal(3));DebugPrint("Set Untracked Memory");end);DebugPrint("Set UntrackedMemoryDevConsole");end SetUntrackedMemoryDevConsole();DevConsoleEntries.ChildAdded:Connect(function(child) if (child.Name=="UntrackedMemory") then SetUntrackedMemoryDevConsole();end if (child.Name=="Memory") then SetMemoryUsageDevConsole2();end end);end task.spawn(OnMainView);DevConsoleUI.ChildAdded:Connect(function(child) if (child.Name=="MainView") then OnMainView();end end);end OnDevConsoleMaster();CoreGui.ChildAdded:Connect(function(child) if (child.Name=="DevConsoleMaster") then OnDevConsoleMaster();end end);end RunService.Heartbeat:Connect(function(dT) Target=GetClosestPlayerToCursor();local IsAntiAim=Target and AntiAiming(Target) ;UpdateGunSpecific();if Configuration["Bullet Redirection"].Enabled then UpdateFOV();if Target then local Part=GetClosestPartToCursor(Target.Character);Hit=(IsAntiAim and ApplyRecalculatedPredictionFormula(Part)) or ApplyNormalPredictionFormula(Part) ;end else SilentFOV.Visible=false;end local TriggerBotConfiguration=Configuration['TriggerBot'];if (TriggerBotConfiguration.Enabled and Target) then local Tool=LocalPlayer.Character:FindFirstChildOfClass("Tool");if ((CurrentGun~=nil) and (Mouse.Target==TriggerPart)) then Tool:Activate();end local TargetCharacter=Target.Character;local LowerTorso=TargetCharacter.LowerTorso;local Velocity=(IsAntiAim and GetNewVelocity(LowerTorso)) or TargetCharacter.HumanoidRootPart.Velocity ;local Prediction=TriggerBotConfiguration.Prediction;TriggerPart.Position=LowerTorso.Position + (Velocity * Prediction) ;else TriggerPart.Position=Vector3.zero;end local CamlockConfiguration=Configuration['AimAssist'];if (Configuration['AimAssist'].Enabled and CamlockTarget and CamlockTarget.Character and DisableOnThirdPerson() and IsReloading() and CheckHoldingGun()) then local CurrentCamera=Workspace.CurrentCamera;local TargetCharacter=CamlockTarget.Character;local MaxOffset=0.05;local RandomOffset=Vector3.new(math.random( -MaxOffset,MaxOffset),math.random( -MaxOffset,MaxOffset),math.random( -MaxOffset,MaxOffset));local Center=Vector2.new(0.5,0.5);local MousePosition=UserInputService:GetMouseLocation();local MouseDelta=((MousePosition.X/CurrentCamera.ViewportSize.X) -Center.X) * CamlockConfiguration.Sensitivity ;local inAir=TargetCharacter.Humanoid:GetState()==Enum.HumanoidStateType.Freefall ;local Part=(inAir and CamlockConfiguration['Air'].Part) or CamlockConfiguration['Ground'].Part ;Part=TargetCharacter[Part];local Smoothing=(inAir and CamlockConfiguration['Air'].Smoothing) or CamlockConfiguration['Ground'].Smoothing ;local EasedSmoothing=TweenService:GetValue(Smoothing,CamlockConfiguration.Easing.Style,CamlockConfiguration.Easing.Direction);local BasePrediction=(inAir and CamlockConfiguration['Air'].Prediction) or CamlockConfiguration['Ground'].Prediction ;local Prediction=(AntiAiming(CamlockTarget) and (GetNewVelocity(Part) * BasePrediction)) or (GetNewVelocity(TargetCharacter.HumanoidRootPart) * BasePrediction) ;CurrentCamera.CFrame=CurrentCamera.CFrame:Lerp(CFrame.new(CurrentCamera.CFrame.Position,Part.Position + Prediction + RandomOffset ) * CFrame.Angles(0,MouseDelta,0) ,EasedSmoothing);if TargetCharacter.BodyEffects["K.O"].Value then CamlockTarget=nil;end end end);
